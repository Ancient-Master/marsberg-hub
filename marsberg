
repeat wait() until game:IsLoaded()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local Teams = game:GetService("Teams")
local TeleportService = game:GetService("TeleportService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Namespaces = require(ReplicatedStorage.Service.Namespaces)

local whitelistedPlayers = {}
local whitelistedTeams = {}
local teamNames = {}
local running = false
local visualize = false
local detectionRange = 12

LocalPlayer.CharacterAdded:Connect(function()
    Backpack = LocalPlayer:WaitForChild("Backpack")
end)
local function findPlayerByName(inputName)
    inputName = inputName:lower()
    local players = game.Players:GetPlayers()
    for _, player in ipairs(players) do
        local playerName = player.Name:lower()
        local displayName = player.DisplayName:lower()
        if playerName:sub(1, #inputName) == inputName or displayName:sub(1, #inputName) == inputName then
            return player
        end
    end
    return nil
end
local function hasSpecificItem(itemName)
    local function checkItems(container)
        for _, item in ipairs(container:GetChildren()) do
            if item.Name == itemName then
                return true
            end
        end
        return false
    end
    return checkItems(Backpack) or checkItems(LocalPlayer.Character)
end

local function calculateDistance(player1, player2)
    if player1 and player2 and player1.Character and player2.Character then
        local pos1 = player1.Character:FindFirstChild("HumanoidRootPart").Position
        local pos2 = player2.Character:FindFirstChild("HumanoidRootPart").Position
        return (pos1 - pos2).Magnitude
    end
    return nil
end

local function detectNearestPlayer()
    local nearestPlayer = nil
    local shortestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and not table.find(whitelistedPlayers, player.Name) then
            local character = player.Character
            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                local distance = calculateDistance(LocalPlayer, player)
                if distance and distance < shortestDistance then
                    shortestDistance = distance
                    nearestPlayer = player
                end
            end
        end
    end

    return nearestPlayer, shortestDistance
end

local usableWeapons = {
    "Glass Fragment",
    "Wooden Bat",
    "Metal Shard",
    "Glass Shard",
    "Crowbar",

    "Riot Control",
    "Electrostaff",
    "Stunstick"
}

local function useBestWeaponOnNearestPlayer(range)
    local nearestPlayer, distance = detectNearestPlayer()
    if nearestPlayer and distance <= range then
        local playerTeam = nearestPlayer.Team and nearestPlayer.Team.Name or nil
        if not table.find(whitelistedPlayers, nearestPlayer.Name) and (not playerTeam or not table.find(whitelistedTeams, playerTeam)) then
            local bestWeapon = nil
            local bestPriority = math.huge

            for _, weapon in ipairs(usableWeapons) do
                if hasSpecificItem(weapon) then
                    local priority = table.find(usableWeapons, weapon)
                    if priority and priority < bestPriority then
                        bestPriority = priority
                        bestWeapon = weapon
                    end
                end
            end

            if bestWeapon then
                for i = 1, 3 do
                    coroutine.wrap(function()
                local args = {
                    nearestPlayer.Character.Humanoid,
                    nearestPlayer.Character.Torso,
                    Backpack:FindFirstChild(bestWeapon) or LocalPlayer.Character:FindFirstChild(bestWeapon)
                }
                Namespaces.MeleeReplication.packets.sendHit.send(args)
            end)()
                end
                if table.find({"Electrostaff", "Riot Control","Glass Fragment","Wooden Bat",}, bestWeapon) then
                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= LocalPlayer and not table.find(whitelistedPlayers, player.Name) then
                            local character = player.Character
                            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 then
                                local distance = calculateDistance(LocalPlayer, player)
                                if distance and distance <= range then
                                    local args = {
                                        player.Character.Humanoid,
                                        player.Character.Torso,
                                        Backpack:FindFirstChild(bestWeapon) or LocalPlayer.Character:FindFirstChild(bestWeapon)
                                    }
                                    Namespaces.MeleeReplication.packets.sendHit.send(args)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

local function boxPlayer(range)
    local nearestPlayer, distance = detectNearestPlayer()
    if nearestPlayer and distance <= range then
        local playerTeam = nearestPlayer.Team and nearestPlayer.Team.Name or nil
        if not table.find(whitelistedPlayers, nearestPlayer.Name) and (not playerTeam or not table.find(whitelistedTeams, playerTeam)) then
            if hasSpecificItem("Box") then
                local args = {
                    nearestPlayer,
                    false,
                    60
                }
                ReplicatedStorage:WaitForChild("Remote"):WaitForChild("Detainment"):FireServer(unpack(args))
            end
        end
    end
end

local Marsberg = loadstring(game:HttpGet("https://raw.githubusercontent.com/deeeity/mercury-lib/master/src.lua"))()
local MarsBerg = Marsberg:Create{
    Name = "Marsberg",
    Size = UDim2.fromOffset(600, 400),
    Theme = Marsberg.Themes.Legancy,
    Link = "Marsberg"
}

local Asylum_Life = MarsBerg:Tab{
    Name = "Asylum-Life",
    Icon = "rbxassetid://8569322835",
}

local function toggleKillAura(state)
    if state then
        MarsBerg:set_status("Kill Aura enabled.")
        running = true
        spawn(function()
            while running do
                useBestWeaponOnNearestPlayer(detectionRange)
                wait()
            end
        end)
    else
        running = false
        MarsBerg:set_status("Kill Aura disabled.")
    end
end

local function toggleBoxPlayer(state)
    if state then
        MarsBerg:set_status("Box Aura enabled.")
        running = true
        spawn(function()
            while running do
                local success, errorMessage = pcall(function()
                    boxPlayer(detectionRange)
                end)
                if not success then
                    warn("Error in boxPlayer: " .. errorMessage)
                end
                wait() -- Avoid spamming; add delay between executions
            end
        end)
    else
        running = false
        MarsBerg:set_status("Box Aura disabled.")
    end
end




local function TpAura(state)
    if state then
        MarsBerg:set_status("Tp Aura enabled.")
        running = true
        spawn(function()
            while running do
                local nearestPlayer, distance = detectNearestPlayer()
                if nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChild("Humanoid") and nearestPlayer.Character.Humanoid.Health > 0 then
                    while nearestPlayer and nearestPlayer.Character and nearestPlayer.Character:FindFirstChild("Humanoid") and nearestPlayer.Character.Humanoid.Health > 0 do
                        LocalPlayer.Character:SetPrimaryPartCFrame(nearestPlayer.Character:GetPrimaryPartCFrame())
                        useBestWeaponOnNearestPlayer(detectionRange)
                        task.wait() -- Adjust the delay as needed
                    end
                end
                wait()
            end
        end)
    else
        running = false
        MarsBerg:set_status("Tp Aura disabled.")
    end
end

Asylum_Life:Toggle{
    Name = "Kill Aura",
    StartingState = false,
    Callback = toggleKillAura
}

Asylum_Life:Toggle{
    Name = "Tp Aura",
    StartingState = false,
    Callback = TpAura
}
Asylum_Life:Toggle{
    Name = "Box Player",
    StartingState = false,
    Callback = toggleBoxPlayer
}

Asylum_Life:Slider{
    Name = "Detection Range",
    Min = 0,
    Max = 14,
    Default = detectionRange,
    Callback = function(value)
        detectionRange = value
        MarsBerg:set_status("Detection range set to " .. value .. " studs.")
        if LocalPlayer.Character:FindFirstChild("VisualizerHighlight") then
            LocalPlayer.Character.VisualizerHighlight.Size = Vector3.new(value * 2, value * 2, value * 2)
        end
    end
}

Asylum_Life:Toggle{
    Name = "Visualizer Range",
    StartingState = false,
    Callback = function(state)
        visualize = state
        if state then
            MarsBerg:set_status("Visualizer enabled.")
            local function createHighlight()
                local highlight = Instance.new("Part")
                highlight.Shape = Enum.PartType.Ball
                highlight.Size = Vector3.new(detectionRange * 2, detectionRange * 2, detectionRange * 2)
                highlight.Transparency = 0.5
                highlight.Anchored = true
                highlight.CanCollide = false
                highlight.Parent = LocalPlayer.Character
                highlight.Name = "VisualizerHighlight"
                return highlight
            end

            local highlight = createHighlight()

            RunService.RenderStepped:Connect(function()
                if highlight and highlight.Parent then
                    highlight.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
                end
            end)

            LocalPlayer.CharacterAdded:Connect(function()
                if visualize then
                    highlight = createHighlight()
                end
            end)
        else
            MarsBerg:set_status("Visualizer disabled.")
            if LocalPlayer.Character:FindFirstChild("VisualizerHighlight") then
                LocalPlayer.Character.VisualizerHighlight:Destroy()
            end
        end
    end
}

local Targeting = MarsBerg:Tab{
    Name = "Targeting",
    Icon = "rbxassetid://8569322835"
}

for _, team in ipairs(Teams:GetTeams()) do
    table.insert(teamNames, team.Name)
end


Targeting:TextBox{
    Name = "Whitelist Player",
    Placeholder = "Enter player name",
    Callback = function(value)
        if value and value ~= "" then
            local matchedPlayer = findPlayerByName(value)
            if matchedPlayer and not table.find(whitelistedPlayers, matchedPlayer.Name) then
                table.insert(whitelistedPlayers, matchedPlayer.Name)
                MarsBerg:set_status(matchedPlayer.Name .. " has been whitelisted.")
                MarsBerg:Notification{
                    Title = "Notification",
                    Text = matchedPlayer.Name .. " has been whitelisted.",
                    Duration = 5
                }
            else
                MarsBerg:set_status(matchedPlayer and (matchedPlayer.Name .. " is already whitelisted.") or "No matching player found.")
                MarsBerg:Notification{
                    Title = "Notification",
                    Text = matchedPlayer and (matchedPlayer.Name .. " is already whitelisted.") or "No matching player found.",
                    Duration = 5
                }
            end
        else
            MarsBerg:set_status("Please enter a valid player name.")
            MarsBerg:Notification{
                Title = "Notification",
                Text = "Please enter a valid player name.",
                Duration = 5
            }
        end
    end
}

Targeting:TextBox{
    Name = "Remove Whitelisted Player",
    Placeholder = "Enter player name",
    Autocomplete = function()
        return whitelistedPlayers
    end,
    Callback = function(value)
        if value and value ~= "" then
            local index = table.find(whitelistedPlayers, value)
            if index then
                table.remove(whitelistedPlayers, index)
                MarsBerg:set_status(value .. " has been removed from the whitelist.")
                MarsBerg:Notification{
                    Title = "Notification",
                    Text = value .. " has been removed from the whitelist.",
                    Duration = 5
                }
            else
                MarsBerg:set_status("Player not found in whitelist.")
                MarsBerg:Notification{
                    Title = "Notification",
                    Text = "Player not found in whitelist.",
                    Duration = 5
                }
            end
        else
            MarsBerg:set_status("Please enter a valid player name.")
            MarsBerg:Notification{
                Title = "Notification",
                Text = "Please enter a valid player name.",
                Duration = 5
            }
        end
    end
}

Targeting:Button{
    Name = "Show Whitelisted Users",
    Callback = function()
        local whitelistedUsers = table.concat(whitelistedPlayers, ", ")
        if whitelistedUsers == "" then
            whitelistedUsers = "No users are currently whitelisted."
        end
        MarsBerg:set_status("Whitelisted Users: " .. whitelistedUsers)
        MarsBerg:Notification{
            Title = "Whitelisted Users",
            Text = whitelistedUsers,
            Duration = 10
        }
    end
}

local Universal = MarsBerg:Tab{
    Name = "Universal",
    Icon = "rbxassetid://8569322835"
}


Universal:Button{
    Name = "Rejoin",
    Callback = function()
        TeleportService:Teleport(game.PlaceId, LocalPlayer)
        MarsBerg:set_status("Rejoining...")
        MarsBerg:Notification{
            Title = "Alert",
            Text = "Rejoining...",
            Duration = 3
        }
    end
}
